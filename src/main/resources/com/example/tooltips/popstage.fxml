<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane fx:id="rootPanePOP" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" style="-fx-background-color: #ecf5eb; -fx-border-color: black;" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.tooltips.ControllerPopstage">

      <Text fx:id="txtInfo" layoutX="43.0" layoutY="37.0" strokeType="OUTSIDE" strokeWidth="0.0" text="n this example, we create a custom alert by creating a new Stage and populating it with a VBox containing a label and an OK button. We set the background color of the VBox using CSS with the -fx-background-color property. The custom alert is displayed with a light blue (#e0f0ff) background color.Keep in mind that customizing the appearance of an alert this way might not provide the same consistent look and feel as the standard system alert. Customizing alerts may be useful when you want a specific design or have unique requirements, but it may not fully match the native look and behavior of standard alerts." textAlignment="CENTER" wrappingWidth="521.0">
         <font>
            <Font name="Arial Narrow" size="19.0" />
         </font>
      </Text>
      <Button fx:id="popBtn" layoutX="274.0" layoutY="325.0" mnemonicParsing="false" text="Got it">
      <font>
         <Font size="8.0" />
      </font></Button>

</AnchorPane>
